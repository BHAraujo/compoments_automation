quit
expect(modal.modal_texto.text.include?(texto)).to eql(true)
modal.modal_texto.text
quit
expect(position.include?("background: rgb(0, 200, 0)")).to eql(true)
position = dragdrop.drop[:style]
expect(position.include?("background: rgb(0, 200, 0)")).to eql(true)
expect(position.include?("background: rgb(0, 200, 0) none repeat scroll 0% 0%;")).to eql(true)
expect(position.include?("background: rgb(0, 200, 0) none repeat scroll 0% 0%")).to eql(true)
position = dragdrop.drop[:style]
position
position.gsub(f";", "teste")
position.gsub(r";", "teste")
position.gsub(";", "teste")
position.gsub("scroll", "teste")
position
position = dragdrop.drop[:style]
quit
t = ";"
n
expect(position.to_s).to eql('background: rgb(0, 200, 0) none repeat scroll 0% 0%')
expect(position.to_s).to eql('background: rgb(0, 200, 0) none repeat scroll 0% 0%;')
expect(position.to_s).to be('background: rgb(0, 200, 0) none repeat scroll 0% 0%#{;}')
quit
a.gsub(;, "")
a.gsub(";", "")
a.gsub(';', '')
a = position.to_s
position.to_s.gsub(';', '')
position.to_s
position = dragdrop.drop[:style]
quit
position = dragdrop.drop[:style]
a = position.to_s
position.to_s.gsub(';','')
position.to_s.gsub(";","")
   expect(position.gsub(";","").to_s).to be("background: rgb(0, 200, 0) none repeat scroll 0% 0%;")
expect(position.to_s).to be("background: rgb(0, 200, 0) none repeat scroll 0% 0%")
expect(position.to_s).to be("background: rgb(0, 200, 0) none repeat scroll 0% 0%;")
position.to_s
position.to_s.class
position = dragdrop.drop[:style]
position.to_s.class
position.to_s
position = dragdrop.drop[:style]
dragdrop.drop[:style]
expect(dragdrop.drop[:style].to_s).to have_content("200")
expect(dragdrop.drop[:style].to_s).to be("background: rgb(0, 200, 0) none repeat scroll 0% 0%")
expect(dragdrop.drop[:style].to_s).to be("background: rgb(0, 200, 0) none repeat scroll 0% 0%;")
a.split("( ")
a.split(" ")
a.split("")
a.split("")[1]
a.split(" ")[1]
a.split(" ")[0]
a.split(" ")
a = dragdrop.drop[:style]
dragdrop.drop[:style]
quit
dragdrop.drop[:style]
dragdrop.drop[:style])
cond
quit
qui
  expect(links.image[:alt]).to start_with(image)
links.image[:alt]
  expect(links.image[:alt]).to have_content(image)
links.image[:alt]
quit
a["teste"]
a  = {"teste" => 1}
a[:teste]
a["teste"]
a  = {:teste => 1}
a["teste"]
a  = {"teste": 1}
a[:teste]
a["teste"]
a  = {:teste => 1}
a[:teste]
a["teste"]
a  = {:"teste" => 1}
a  = {:"teste": 1}
dict_botao[:Raised].click
dict_botao[:Raised]
dict_botao["Raised"]
dict_botao = {"Raised": botao_raised}
dict_botao["Raised"]
dict_botao["Raised"].click
dict_botao = {"Raised": botao_raised}
dict_botao = {"Raised": botao_raised,
botao_floating.click
botao_raised.click
botao_raised
quit
   27:                   "Submmit": botao_submmit}
   26:                   "Flat": botao_flat,
   25:                   "Floating": botao_floating,
  dict_botao = {"Raised": botao_raised,
dict_botao
n
dict_botao
botao
dict_botao[botao]
quit
find("label[for='#{radio}']")
 radio.selecionar_radio_button(radio)
radio
quit
find("label[for='#{radio}']").click
quit
